[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "TimeEval"
description = "Evaluation Tool for Time Series Anomaly Detection Methods"
license = "MIT"
license-files = ["LICENSE"]
authors= [
    {"name" = "Sebastian Schmidl", email = "sebastian.schmidl@hpi.de"},
    {"name" = "Phillip Wenig", email = "phillip.wenig@hpi.de"}
]
classifiers=[
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
]
requires-python = ">=3.9, <3.13"
dependencies = [
    "scikit-learn>=1.0.0",
    "matplotlib>=3.5.0",
    "numpy>=1.25.0",
    "pandas>=1.3.0",
    "statsmodels>=0.12.2",
    "jinja2>=3.0.0",
    "tqdm>=4.54.0",
    "asyncssh>=2.5.0",
    "psutil",
    "dask[distributed]==2022.12.1",
    "click>=8.0.2",
    "docker>=4.4.0",
    "durations>=0.3.0",
    "prts==1.0.0.3", # prevents us from using numpy>=2.0.0, which prevents us from updating to newer python versions
    "numpyencoder>=0.3.0",
]
dynamic = ["readme", "version", "scripts"]

[project.optional-dependencies]
ci = [
    "pytest",
    "pytest-cov",
    "freezegun",
    "mypy==1.15.0",
    "flake8==7.2.0",
    "black==25.1.0",
    "isort==6.0.1",
    "pre-commit",
    # for the test of the PyThreshThresholding class:
    "pythresh>=0.2.8",
    # for the test of the Optuna integration
    "optuna>=3.1.0",
    # typings
    "types-requests",
    "types-freezegun",
]
dev = [
    # for scripts
    "multiprocessing_logging",
    # for notebooks
    "jupyterlab",
    "wfdb",
    "tables",
    "pyyaml",
    "pylustrator==1.1.0",
    "plotly==5.1",
    # for dask dashboard
    "bokeh>=0.13.0",
]

[tool.coverage.run]
branch = false
parallel = true
omit = ["**/__main__.py", "timeeval/algorithms/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "\\.\\.\\.",
    "def __repr__",
    "pass",
    "if __name__ == .__main__.:",
]
fail_under = 80
skip_covered = true
sort = "Cover"

[tool.mypy]
python_version = "3.9"
pretty = true
show_error_codes = true
exclude = [
    "^timeeval_experiments/\\d\\d\\d\\d-\\d\\d-\\d\\d[_-].+$",
    "^notebooks/.*$",
    "^scripts/.*$",
    "^tests/.*$",
    "conftest.py",
    "setup.py",
]
ignore_missing_imports = true
warn_unused_configs = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
no_implicit_optional = true
check_untyped_defs = true

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 5
balanced_wrapping = true
skip_gitignore = true
extend_skip_glob = ["timeeval_experiments/20*.py"]
extend_skip = [
    "notebooks",
    "timeeval/algorithms",
    "scripts",
]

[tool.black]
extend-exclude = '''
(
    timeeval_experiments/\d\d\d\d-\d\d-\d\d[_-].+$  # experiment scripts
    | notebooks/.*            # notebooks
    | timeeval/algorithms/.*  # auto-generated code
    | scripts/.*              # scripts might contain old code
)
'''
