name: Build

on:
  push:
    branches: [main]
    tags:
      - v*

# Required shell entrypoint to have properly activated conda environments
defaults:
  run:
    shell: bash -l {0}

jobs:
  typecheck:
    name: Typecheck TimeEval on ubuntu with python 3.7
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2.2.0
        with:
          use-mamba: true
          auto-update-conda: true
          environment-file: environment.yml
          python-version: "3.7"
      - name: Install CI dependencies
        run: |
          pip install -r requirements.ci
      - name: Typcheck with mypy
        run: |
          python setup.py typecheck
  test:
    name: Test TimeEval on ${{ matrix.os }} with python ${{ matrix.python_version }}
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 3
      matrix:
        os: [ubuntu-latest] # [ubuntu-latest, windows-latest, macOS-latest]
        python_version: ["3.7", "3.8", "3.9"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v3
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v2.2.0
      with:
        use-mamba: true
        auto-update-conda: true
        environment-file: environment.yml
        python-version: ${{ matrix.python_version }}
    - name: Install CI dependencies
      run: |
        pip install -r requirements.ci
    - name: Test with pytest
      run: |
        python setup.py test
    - name: Extract test coverage
      if: ${{ matrix.python_version == '3.9' && matrix.os == 'ubuntu-latest' }}
      run: |
        SUMMARY=$(sed -n "s/^<coverage.*line-rate=\"\([0-9.]*\)\".*>$/\1/p" coverage.xml)
        echo "COVERAGE=$(echo ${SUMMARY})" >> $GITHUB_ENV
        echo "Extracted coverage data: ${COVERAGE}"
        REF=${{ github.ref }}
        IFS='/' read -ra PATHS <<< "$REF"
        BRANCH_NAME="${PATHS[1]}_${PATHS[2]}"
        echo "BRANCH=$(echo ${BRANCH_NAME})" >> $GITHUB_ENV
        echo "Extracted branch name: $BRANCH_NAME"
    - name: Create coverage badge
      if: ${{ matrix.python_version == '3.9' && matrix.os == 'ubuntu-latest' }}
      uses: schneegans/dynamic-badges-action@v1.6.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 6762bee806477c52e079f21d2f252688
        filename: timeeval__${{ env.BRANCH }}.json
        label: Test Coverage
        message: ${{ env.COVERAGE }}
        color: green
        namedLogo: pytest
    - name: Upload Coverage to Codecov
      if: ${{ matrix.python_version == '3.9' && matrix.os == 'ubuntu-latest' }}
      uses: codecov/codecov-action@v3
      with:
        files: coverage.xml
        flags: unittests

  build-source-distribution:
    name: Build source distribution
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs:
      - test
      - typecheck
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v2.2.0
      with:
        use-mamba: true
        auto-update-conda: true
        python-version: 3.7
        environment-file: environment.yml
    - name: Build source distribution
      run: |
        python setup.py sdist
    - name: Upload packages
      uses: actions/upload-artifact@v3
      with:
        name: packages-source
        path: dist

  build-manylinux-wheels:
    name: Build manylinux wheels
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs:
      - test
      - typecheck
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Build manylinux Python wheels
        uses: RalfG/python-wheels-manylinux-build@v0.4.2-manylinux2010_x86_64
        with:
          python-versions: 'cp37-cp37m cp38-cp38 cp39-cp39'
      - name: List packages
        run: |
          ls -alh dist
      - name: Upload packages
        uses: actions/upload-artifact@v3
        with:
          name: packages-manylinux
          path: dist/*.whl

  publish:
    name: Publish distributions
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs: [build-source-distribution, build-manylinux-wheels]
    runs-on: ubuntu-latest

    steps:
    - name: Download packages
      uses: actions/download-artifact@v3
      with:
        path: dist
    - name: Restore original folder structure of dist
      run: |
        find dist -type f -exec mv {} dist/ \;
        find dist/* -type d -exec rmdir {} \; || true
    - name: Publish package to PyPi
      uses: pypa/gh-action-pypi-publish@v1.5.1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
