# DO NOT EDIT THIS FILE!
# This file was automatically generated using the timeeval_experiments.generator from the template:
# timeeval_experiments/generator/templates/docker-algorithm.py.jinja
from durations import Duration
from typing import Any, Dict, Optional

from timeeval import Algorithm, TrainingType, InputDimensionality
from timeeval.adapters import DockerAdapter
from timeeval.params import ParameterConfig


_arima_parameters: Dict[str, Dict[str, Any]] = {
 "differencing_degree": {
  "defaultValue": 0,
  "description": "Differencing degree for the auto-ARIMA process",
  "name": "differencing_degree",
  "type": "int"
 },
 "distance_metric": {
  "defaultValue": "Euclidean",
  "description": "Distance measure used to calculate the prediction error = anomaly score",
  "name": "distance_metric",
  "type": "enum[Euclidean,Mahalanobis,Garch,SSA,Fourier,DTW,EDRS,TWED]"
 },
 "max_lag": {
  "defaultValue": 30000,
  "description": "Number of points, after which the ARIMA model is re-fitted to the data to deal with trends and shifts",
  "name": "max_lag",
  "type": "int"
 },
 "max_p": {
  "defaultValue": 5,
  "description": "Maximum AR-order for the auto-ARIMA process",
  "name": "max_p",
  "type": "int"
 },
 "max_q": {
  "defaultValue": 5,
  "description": "Maximum MA-order for the auto-ARIMA process",
  "name": "max_q",
  "type": "int"
 },
 "p_start": {
  "defaultValue": 1,
  "description": "Minimum AR-order for the auto-ARIMA process",
  "name": "p_start",
  "type": "int"
 },
 "q_start": {
  "defaultValue": 1,
  "description": "Minimum MA-order for the auto-ARIMA process",
  "name": "q_start",
  "type": "int"
 },
 "random_state": {
  "defaultValue": 42,
  "description": "Seed for the random number generator",
  "name": "random_state",
  "type": "int"
 },
 "window_size": {
  "defaultValue": 20,
  "description": "Size of sliding window (also used as prediction window size)",
  "name": "window_size",
  "type": "int"
 }
}


def arima(params: Optional[ParameterConfig] = None, skip_pull: bool = False, timeout: Optional[Duration] = None) -> Algorithm:
    """ARIMA

    Anomoly detector using ARIMA estimation and (default: euclidean) distance function to calculate prediction error as anomaly score

    .. warning::
       The implementation of this algorithm is not publicly available (closed source).
       Thus, TimeEval will fail to download the Docker image and the algorithm will not be available.
       Please contact the authors of the algorithm for the implementation and build the algorithm Docker image yourself.

    **Algorithm Parameters:**

    window_size: int
        Size of sliding window (also used as prediction window size) (default: ``20``)
    max_lag: int
        Number of points, after which the ARIMA model is re-fitted to the data to deal with trends and shifts (default: ``30000``)
    p_start: int
        Minimum AR-order for the auto-ARIMA process (default: ``1``)
    q_start: int
        Minimum MA-order for the auto-ARIMA process (default: ``1``)
    max_p: int
        Maximum AR-order for the auto-ARIMA process (default: ``5``)
    max_q: int
        Maximum MA-order for the auto-ARIMA process (default: ``5``)
    differencing_degree: int
        Differencing degree for the auto-ARIMA process (default: ``0``)
    distance_metric: enum[Euclidean,Mahalanobis,Garch,SSA,Fourier,DTW,EDRS,TWED]
        Distance measure used to calculate the prediction error = anomaly score (default: ``Euclidean``)
    random_state: int
        Seed for the random number generator (default: ``42``)

    Parameters
    ----------
    params : Optional[ParameterConfig]
        Parameter configuration for the algorithm
    skip_pull : bool
        Set to ``True`` to skip pulling the Docker image and use a local image instead.
        If the image is not present locally, this will raise an error.
    timeout : Optional[Duration]
        Set an individual execution and training timeout for this algorithm.
        This will overwrite the global timeouts set using :class:`~timeeval.ResourceConstraints`.

    Returns
    -------
    ~timeeval.Algorithm
        A correctly configured :class:`~timeeval.Algorithm` object for the ARIMA algorithm.
    """
    return Algorithm(
        name="ARIMA",
        main=DockerAdapter(
            image_name="ghcr.io/timeeval/arima",
            tag="0.3.0",
            skip_pull=skip_pull,
            timeout=timeout,
            group_privileges="akita",
        ),
        preprocess=None,
        postprocess=None,
        param_schema=_arima_parameters,
        param_config=params or ParameterConfig.defaults(),
        data_as_file=True,
        training_type=TrainingType.UNSUPERVISED,
        input_dimensionality=InputDimensionality("univariate")
    )
