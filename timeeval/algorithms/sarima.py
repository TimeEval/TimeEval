# DO NOT EDIT THIS FILE!
# This file was automatically generated using the timeeval_experiments.generator from the template:
# timeeval_experiments/generator/templates/docker-algorithm.py.jinja
from durations import Duration
from typing import Any, Dict, Optional

from timeeval import Algorithm, TrainingType, InputDimensionality
from timeeval.adapters import DockerAdapter
from timeeval.params import ParameterConfig


_sarima_parameters: Dict[str, Dict[str, Any]] = {
 "exhaustive_search": {
  "defaultValue": "False",
  "description": "Performs full grid search to find optimal SARIMA-model without considering statistical tests on the data --> SLOW! but finds the optimal model.",
  "name": "exhaustive_search",
  "type": "boolean"
 },
 "max_iter": {
  "defaultValue": 20,
  "description": "The maximum number of function evaluations. smaller = faster, but might not converge.",
  "name": "max_iter",
  "type": "int"
 },
 "max_lag": {
  "defaultValue": None,
  "description": "Refit SARIMA model after that number of points (only helpful if fixed_orders=None)",
  "name": "max_lag",
  "type": "int"
 },
 "n_jobs": {
  "defaultValue": 1,
  "description": "The number of parallel jobs to run for grid search. If ``-1``, then the number of jobs is set to the number of CPU cores.",
  "name": "n_jobs",
  "type": "int"
 },
 "period": {
  "defaultValue": 1,
  "description": "Periodicity (number of periods in season), often it is 4 for quarterly data or 12 for monthly data. Default is no seasonal effect (==1). Must be >= 1.",
  "name": "period",
  "type": "int"
 },
 "prediction_window_size": {
  "defaultValue": 10,
  "description": "Number of points to forecast in one go; smaller = slower, but more accurate.",
  "name": "prediction_window_size",
  "type": "int"
 },
 "random_state": {
  "defaultValue": 42,
  "description": "Seed for random number generation.",
  "name": "random_state",
  "type": "int"
 },
 "train_window_size": {
  "defaultValue": 500,
  "description": "Number of points from the beginning of the series to build model on.",
  "name": "train_window_size",
  "type": "int"
 }
}


def sarima(params: Optional[ParameterConfig] = None, skip_pull: bool = False, timeout: Optional[Duration] = None) -> Algorithm:
    """SARIMA

    Implementation of SARIMA method described in https://milets18.github.io/papers/milets18_paper_19.pdf.


    **Algorithm Parameters:**

    train_window_size: int
        Number of points from the beginning of the series to build model on. (default: ``500``)
    prediction_window_size: int
        Number of points to forecast in one go; smaller = slower, but more accurate. (default: ``10``)
    max_lag: int
        Refit SARIMA model after that number of points (only helpful if fixed_orders=None) (default: ``None``)
    period: int
        Periodicity (number of periods in season), often it is 4 for quarterly data or 12 for monthly data. Default is no seasonal effect (==1). Must be >= 1. (default: ``1``)
    max_iter: int
        The maximum number of function evaluations. smaller = faster, but might not converge. (default: ``20``)
    exhaustive_search: boolean
        Performs full grid search to find optimal SARIMA-model without considering statistical tests on the data --> SLOW! but finds the optimal model. (default: ``false``)
    n_jobs: int
        The number of parallel jobs to run for grid search. If ``-1``, then the number of jobs is set to the number of CPU cores. (default: ``1``)
    random_state: int
        Seed for random number generation. (default: ``42``)

    Parameters
    ----------
    params : Optional[ParameterConfig]
        Parameter configuration for the algorithm
    skip_pull : bool
        Set to ``True`` to skip pulling the Docker image and use a local image instead.
        If the image is not present locally, this will raise an error.
    timeout : Optional[Duration]
        Set an individual execution and training timeout for this algorithm.
        This will overwrite the global timeouts set using :class:`~timeeval.ResourceConstraints`.

    Returns
    -------
    ~timeeval.Algorithm
        A correctly configured :class:`~timeeval.Algorithm` object for the SARIMA algorithm.
    """
    return Algorithm(
        name="SARIMA",
        main=DockerAdapter(
            image_name="ghcr.io/timeeval/sarima",
            tag="0.3.0",
            skip_pull=skip_pull,
            timeout=timeout,
            group_privileges="akita",
        ),
        preprocess=None,
        postprocess=None,
        param_schema=_sarima_parameters,
        param_config=params or ParameterConfig.defaults(),
        data_as_file=True,
        training_type=TrainingType.UNSUPERVISED,
        input_dimensionality=InputDimensionality("univariate")
    )
