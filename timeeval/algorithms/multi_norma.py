# DO NOT EDIT THIS FILE!
# This file was automatically generated using the timeeval_experiments.generator from the template:
# timeeval_experiments/generator/templates/docker-algorithm.py.jinja
from durations import Duration
from typing import Any, Dict, Optional

from timeeval import Algorithm, TrainingType, InputDimensionality
from timeeval.adapters import DockerAdapter
from timeeval.params import ParameterConfig


_multi_norma_parameters: Dict[str, Dict[str, Any]] = {
 "anomaly_window_size": {
  "defaultValue": 20,
  "description": "Sliding window size used to create subsequences (equal to desired anomaly length)",
  "name": "anomaly_window_size",
  "type": "int"
 },
 "join_combine_method": {
  "defaultValue": 1,
  "description": "how to combine the join values from all dimensions.[0=sum, 1=max, 2=score dims (based on std, mean, range), 3=weight higher vals, 4=vals**channels]",
  "name": "join_combine_method",
  "type": "int"
 },
 "max_motifs": {
  "defaultValue": 4096,
  "description": "Maximum number of used motifs. Important to avoid OOM errors.",
  "name": "max_motifs",
  "type": "int"
 },
 "motif_detection": {
  "defaultValue": "mixed",
  "description": "Algorithm to use for motif detection [random, stomp, mixed].",
  "name": "motif_detection",
  "type": "Enum[stomp,random,mixed]"
 },
 "normal_model_percentage": {
  "defaultValue": 0.5,
  "description": "Percentage of (random) subsequences used to build the normal model.",
  "name": "normal_model_percentage",
  "type": "float"
 },
 "normalize_join": {
  "defaultValue": True,
  "description": "Apply join normalization heuristic. [False = no normalization, True = normalize]",
  "name": "normalize_join",
  "type": "boolean"
 },
 "random_state": {
  "defaultValue": 42,
  "description": "Seed for random number generation.",
  "name": "random_state",
  "type": "int"
 },
 "sum_dims": {
  "defaultValue": False,
  "description": "Sum all dimensions up before computing dists, otherwise each dim is handled seperately.",
  "name": "sum_dims",
  "type": "boolean"
 }
}


def multi_norma(params: Optional[ParameterConfig] = None, skip_pull: bool = False, timeout: Optional[Duration] = None) -> Algorithm:
    """MultiNormA

    Improved algorithm based on NorM (https://doi.org/10.1109/ICDE48307.2020.00182).

    .. warning::
       The implementation of this algorithm is not publicly available (closed source).
       Thus, TimeEval will fail to download the Docker image and the algorithm will not be available.
       Please contact the authors of the algorithm for the implementation and build the algorithm Docker image yourself.

    **Algorithm Parameters:**

    anomaly_window_size: int
        Sliding window size used to create subsequences (equal to desired anomaly length) (default: ``20``)
    normal_model_percentage: float
        Percentage of (random) subsequences used to build the normal model. (default: ``0.5``)
    max_motifs: int
        Maximum number of used motifs. Important to avoid OOM errors. (default: ``4096``)
    random_state: int
        Seed for random number generation. (default: ``42``)
    motif_detection: Enum[stomp,random,mixed]
        Algorithm to use for motif detection [random, stomp, mixed]. (default: ``mixed``)
    sum_dims: boolean
        Sum all dimensions up before computing dists, otherwise each dim is handled seperately. (default: ``False``)
    normalize_join: boolean
        Apply join normalization heuristic. [false = no normalization, true = normalize] (default: ``True``)
    join_combine_method: int
        how to combine the join values from all dimensions.[0=sum, 1=max, 2=score dims (based on std, mean, range), 3=weight higher vals, 4=vals**channels] (default: ``1``)

    Parameters
    ----------
    params : Optional[ParameterConfig]
        Parameter configuration for the algorithm
    skip_pull : bool
        Set to ``True`` to skip pulling the Docker image and use a local image instead.
        If the image is not present locally, this will raise an error.
    timeout : Optional[Duration]
        Set an individual execution and training timeout for this algorithm.
        This will overwrite the global timeouts set using :class:`~timeeval.ResourceConstraints`.

    Returns
    -------
    ~timeeval.Algorithm
        A correctly configured :class:`~timeeval.Algorithm` object for the MultiNormA algorithm.
    """
    return Algorithm(
        name="MultiNormA",
        main=DockerAdapter(
            image_name="ghcr.io/timeeval/multi_norma",
            tag="0.3.0",
            skip_pull=skip_pull,
            timeout=timeout,
            group_privileges="akita",
        ),
        preprocess=None,
        postprocess=None,
        param_schema=_multi_norma_parameters,
        param_config=params or ParameterConfig.defaults(),
        data_as_file=True,
        training_type=TrainingType.UNSUPERVISED,
        input_dimensionality=InputDimensionality("multivariate")
    )
