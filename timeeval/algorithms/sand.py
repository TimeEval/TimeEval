# DO NOT EDIT THIS FILE!
# This file was automatically generated using the timeeval_experiments.generator from the template:
# timeeval_experiments/generator/templates/docker-algorithm.py.jinja
from durations import Duration
from typing import Any, Dict, Optional

from timeeval import Algorithm, TrainingType, InputDimensionality
from timeeval.adapters import DockerAdapter
from timeeval.params import ParameterConfig


_sand_parameters: Dict[str, Dict[str, Any]] = {
 "alpha": {
  "defaultValue": 0.5,
  "description": "Weight decay / forgetting factor. Quite robust",
  "name": "alpha",
  "type": "float"
 },
 "anomaly_window_size": {
  "defaultValue": 75,
  "description": "Size of the anomalous pattern; sliding windows for clustering and preprocessing are of size 3*anomaly_window_size.",
  "name": "anomaly_window_size",
  "type": "int"
 },
 "iter_batch_size": {
  "defaultValue": 500,
  "description": "Number of points for each batch. Mostly impacts performance (not too small).",
  "name": "iter_batch_size",
  "type": "int"
 },
 "n_clusters": {
  "defaultValue": 6,
  "description": "Number of clusters used in Kshape that are maintained iteratively as a normal model",
  "name": "n_clusters",
  "type": "int"
 },
 "n_init_train": {
  "defaultValue": 2000,
  "description": "Number of points to build the initial model (may contain anomalies)",
  "name": "n_init_train",
  "type": "int"
 },
 "random_state": {
  "defaultValue": 42,
  "description": "Seed for random number generation.",
  "name": "random_state",
  "type": "int"
 },
 "use_column_index": {
  "defaultValue": 0,
  "description": "The column index to use as input for the univariate algorithm for multivariate datasets. The selected single channel of the multivariate time series is analyzed by the algorithms. The index is 0-based and does not include the index-column ('timestamp'). The single channel of an univariate dataset, therefore, has index 0.",
  "name": "use_column_index",
  "type": "int"
 }
}


def sand(params: Optional[ParameterConfig] = None, skip_pull: bool = False, timeout: Optional[Duration] = None) -> Algorithm:
    """SAND

    Implementation of SAND described in http://www.vldb.org/pvldb/vol14/p1717-boniol.pdf.

    .. warning::
       The implementation of this algorithm is not publicly available (closed source).
       Thus, TimeEval will fail to download the Docker image and the algorithm will not be available.
       Please contact the authors of the algorithm for the implementation and build the algorithm Docker image yourself.

    **Algorithm Parameters:**

    anomaly_window_size: int
        Size of the anomalous pattern; sliding windows for clustering and preprocessing are of size 3*anomaly_window_size. (default: ``75``)
    n_clusters: int
        Number of clusters used in Kshape that are maintained iteratively as a normal model (default: ``6``)
    n_init_train: int
        Number of points to build the initial model (may contain anomalies) (default: ``2000``)
    iter_batch_size: int
        Number of points for each batch. Mostly impacts performance (not too small). (default: ``500``)
    alpha: float
        Weight decay / forgetting factor. Quite robust (default: ``0.5``)
    random_state: int
        Seed for random number generation. (default: ``42``)
    use_column_index: int
        The column index to use as input for the univariate algorithm for multivariate datasets. The selected single channel of the multivariate time series is analyzed by the algorithms. The index is 0-based and does not include the index-column ('timestamp'). The single channel of an univariate dataset, therefore, has index 0. (default: ``0``)

    Parameters
    ----------
    params : Optional[ParameterConfig]
        Parameter configuration for the algorithm
    skip_pull : bool
        Set to ``True`` to skip pulling the Docker image and use a local image instead.
        If the image is not present locally, this will raise an error.
    timeout : Optional[Duration]
        Set an individual execution and training timeout for this algorithm.
        This will overwrite the global timeouts set using :class:`~timeeval.ResourceConstraints`.

    Returns
    -------
    ~timeeval.Algorithm
        A correctly configured :class:`~timeeval.Algorithm` object for the SAND algorithm.
    """
    return Algorithm(
        name="SAND",
        main=DockerAdapter(
            image_name="ghcr.io/timeeval/sand",
            tag="0.3.0",
            skip_pull=skip_pull,
            timeout=timeout,
            group_privileges="akita",
        ),
        preprocess=None,
        postprocess=None,
        param_schema=_sand_parameters,
        param_config=params or ParameterConfig.defaults(),
        data_as_file=True,
        training_type=TrainingType.UNSUPERVISED,
        input_dimensionality=InputDimensionality("univariate")
    )
