# DO NOT EDIT THIS FILE!
# This file was automatically generated using the timeeval_experiments.generator from the template:
# timeeval_experiments/generator/templates/docker-algorithm.py.jinja
from durations import Duration
from typing import Any, Dict, Optional

from timeeval import Algorithm, TrainingType, InputDimensionality
from timeeval.adapters import DockerAdapter
from timeeval.params import ParameterConfig

import numpy as np


from timeeval.utils.window import ReverseWindowing
# post-processing for s2g
def post_s2g(scores: np.ndarray, args: dict) -> np.ndarray:
    window_size = args.get("hyper_params", {}).get("window_size", 50)
    query_window_size = args.get("hyper_params", {}).get("query_window_size", 75)
    convolution_size = args.get("hyper_params", {}).get("convolution_size", window_size // 3)
    size = (window_size + convolution_size) + query_window_size + 4
    return ReverseWindowing(window_size=size).fit_transform(scores)


_series2graph_parameters: Dict[str, Dict[str, Any]] = {
 "query_window_size": {
  "defaultValue": 75,
  "description": "Size of the sliding windows used to find anomalies (query subsequences). query_window_size must be >= window_size! (paper: `l_q`)",
  "name": "query_window_size",
  "type": "Int"
 },
 "random_state": {
  "defaultValue": 42,
  "description": "Seed for random number generation.",
  "name": "random_state",
  "type": "Int"
 },
 "rate": {
  "defaultValue": 30,
  "description": "Number of angles used to extract pattern nodes. A higher value will lead to high precision, but at the cost of increased computation time. (paper: `r` performance parameter)",
  "name": "rate",
  "type": "Int"
 },
 "window_size": {
  "defaultValue": 50,
  "description": "Size of the sliding window (paper: `l`), independent of anomaly length, but should in the best case be larger.",
  "name": "window_size",
  "type": "Int"
 }
}


def series2graph(params: Optional[ParameterConfig] = None, skip_pull: bool = False, timeout: Optional[Duration] = None) -> Algorithm:
    """Series2Graph

    Implementation of https://doi.org/10.14778/3407790.3407792.

    .. warning::
       The implementation of this algorithm is not publicly available (closed source).
       Thus, TimeEval will fail to download the Docker image and the algorithm will not be available.
       Please contact the authors of the algorithm for the implementation and build the algorithm Docker image yourself.

    **Algorithm Parameters:**

    window_size: Int
        Size of the sliding window (paper: `l`), independent of anomaly length, but should in the best case be larger. (default: ``50``)
    query_window_size: Int
        Size of the sliding windows used to find anomalies (query subsequences). query_window_size must be >= window_size! (paper: `l_q`) (default: ``75``)
    rate: Int
        Number of angles used to extract pattern nodes. A higher value will lead to high precision, but at the cost of increased computation time. (paper: `r` performance parameter) (default: ``30``)
    random_state: Int
        Seed for random number generation. (default: ``42``)

    Parameters
    ----------
    params : Optional[ParameterConfig]
        Parameter configuration for the algorithm
    skip_pull : bool
        Set to ``True`` to skip pulling the Docker image and use a local image instead.
        If the image is not present locally, this will raise an error.
    timeout : Optional[Duration]
        Set an individual execution and training timeout for this algorithm.
        This will overwrite the global timeouts set using :class:`~timeeval.ResourceConstraints`.

    Returns
    -------
    ~timeeval.Algorithm
        A correctly configured :class:`~timeeval.Algorithm` object for the Series2Graph algorithm.
    """
    return Algorithm(
        name="Series2Graph",
        main=DockerAdapter(
            image_name="ghcr.io/timeeval/series2graph",
            tag="0.3.0",
            skip_pull=skip_pull,
            timeout=timeout,
            group_privileges="akita",
        ),
        preprocess=None,
        postprocess=post_s2g,
        param_schema=_series2graph_parameters,
        param_config=params or ParameterConfig.defaults(),
        data_as_file=True,
        training_type=TrainingType.UNSUPERVISED,
        input_dimensionality=InputDimensionality("univariate")
    )
