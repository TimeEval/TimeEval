# DO NOT EDIT THIS FILE!
# This file was automatically generated using the timeeval_experiments.generator from the template:
# timeeval_experiments/generator/templates/docker-algorithm.py.jinja
from durations import Duration
from typing import Any, Dict, Optional

from timeeval import Algorithm, TrainingType, InputDimensionality
from timeeval.adapters import DockerAdapter
from timeeval.params import ParameterConfig

import numpy as np


from timeeval.utils.window import ReverseWindowing
# post-processing for TAnoGan
def post_tanogan(scores: np.ndarray, args: dict) -> np.ndarray:
    length = args.get("dataset_details").length  # type: ignore
    window_size = args.get("hyper_params", {}).get("window_size", 30)
    scores = np.repeat(scores, repeats=window_size)
    result = np.full(shape=length, fill_value=np.nan)
    result[:scores.shape[0]] = scores
    return result


_tanogan_parameters: Dict[str, Dict[str, Any]] = {
 "batch_size": {
  "defaultValue": 32,
  "description": "Number of instances trained at the same time",
  "name": "batch_size",
  "type": "int"
 },
 "cuda": {
  "defaultValue": "False",
  "description": "Set to `True`, if the GPU-backend (using CUDA) should be used. Otherwise, the algorithm is executed on the CPU.",
  "name": "cuda",
  "type": "boolean"
 },
 "early_stopping_delta": {
  "defaultValue": 0.05,
  "description": "If 1 - (loss / last_loss) is less than `delta` for `patience` epochs, stop",
  "name": "early_stopping_delta",
  "type": "float"
 },
 "early_stopping_patience": {
  "defaultValue": 10,
  "description": "If 1 - (loss / last_loss) is less than `delta` for `patience` epochs, stop",
  "name": "early_stopping_patience",
  "type": "int"
 },
 "epochs": {
  "defaultValue": 1,
  "description": "Number of training iterations over entire dataset",
  "name": "epochs",
  "type": "int"
 },
 "iterations": {
  "defaultValue": 25,
  "description": "Number of test iterations per window",
  "name": "iterations",
  "type": "int"
 },
 "learning_rate": {
  "defaultValue": 0.0002,
  "description": "Learning rate for Adam optimizer",
  "name": "learning_rate",
  "type": "float"
 },
 "n_jobs": {
  "defaultValue": 1,
  "description": "Number of workers (processes) used to load and preprocess the data",
  "name": "n_jobs",
  "type": "int"
 },
 "random_state": {
  "defaultValue": 42,
  "description": "Seed for random number generation.",
  "name": "random_state",
  "type": "int"
 },
 "split": {
  "defaultValue": 0.8,
  "description": "Train-validation split for early stopping",
  "name": "split",
  "type": "float"
 },
 "window_size": {
  "defaultValue": 30,
  "description": "Size of the sliding windows",
  "name": "window_size",
  "type": "int"
 }
}


def tanogan(params: Optional[ParameterConfig] = None, skip_pull: bool = False, timeout: Optional[Duration] = None) -> Algorithm:
    """TAnoGan

    Implementation of http://arxiv.org/abs/2008.09567


    **Algorithm Parameters:**

    epochs: int
        Number of training iterations over entire dataset (default: ``1``)
    cuda: boolean
        Set to `true`, if the GPU-backend (using CUDA) should be used. Otherwise, the algorithm is executed on the CPU. (default: ``false``)
    window_size: int
        Size of the sliding windows (default: ``30``)
    learning_rate: float
        Learning rate for Adam optimizer (default: ``0.0002``)
    batch_size: int
        Number of instances trained at the same time (default: ``32``)
    n_jobs: int
        Number of workers (processes) used to load and preprocess the data (default: ``1``)
    random_state: int
        Seed for random number generation. (default: ``42``)
    early_stopping_patience: int
        If 1 - (loss / last_loss) is less than `delta` for `patience` epochs, stop (default: ``10``)
    early_stopping_delta: float
        If 1 - (loss / last_loss) is less than `delta` for `patience` epochs, stop (default: ``0.05``)
    split: float
        Train-validation split for early stopping (default: ``0.8``)
    iterations: int
        Number of test iterations per window (default: ``25``)

    Parameters
    ----------
    params : Optional[ParameterConfig]
        Parameter configuration for the algorithm
    skip_pull : bool
        Set to ``True`` to skip pulling the Docker image and use a local image instead.
        If the image is not present locally, this will raise an error.
    timeout : Optional[Duration]
        Set an individual execution and training timeout for this algorithm.
        This will overwrite the global timeouts set using :class:`~timeeval.ResourceConstraints`.

    Returns
    -------
    ~timeeval.Algorithm
        A correctly configured :class:`~timeeval.Algorithm` object for the TAnoGan algorithm.
    """
    return Algorithm(
        name="TAnoGan",
        main=DockerAdapter(
            image_name="ghcr.io/timeeval/tanogan",
            tag="0.3.0",
            skip_pull=skip_pull,
            timeout=timeout,
            group_privileges="akita",
        ),
        preprocess=None,
        postprocess=post_tanogan,
        param_schema=_tanogan_parameters,
        param_config=params or ParameterConfig.defaults(),
        data_as_file=True,
        training_type=TrainingType.SEMI_SUPERVISED,
        input_dimensionality=InputDimensionality("multivariate")
    )
