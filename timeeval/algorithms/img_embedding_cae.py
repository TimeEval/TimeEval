# DO NOT EDIT THIS FILE!
# This file was automatically generated using the timeeval_experiments.generator from the template:
# timeeval_experiments/generator/templates/docker-algorithm.py.jinja
from durations import Duration
from typing import Any, Dict, Optional

from timeeval import Algorithm, TrainingType, InputDimensionality
from timeeval.adapters import DockerAdapter
from timeeval.params import ParameterConfig


_img_embedding_cae_parameters: Dict[str, Dict[str, Any]] = {
 "anomaly_window_size": {
  "defaultValue": 512,
  "description": "length of one time series chunk (tumbling window)",
  "name": "anomaly_window_size",
  "type": "int"
 },
 "batch_size": {
  "defaultValue": 32,
  "description": "number of simultaneously trained data instances",
  "name": "batch_size",
  "type": "int"
 },
 "early_stopping_delta": {
  "defaultValue": 0.05,
  "description": "If 1 - (loss / last_loss) is less than `delta` for `patience` epochs, stop",
  "name": "early_stopping_delta",
  "type": "float"
 },
 "early_stopping_patience": {
  "defaultValue": 10,
  "description": "If 1 - (loss / last_loss) is less than `delta` for `patience` epochs, stop",
  "name": "early_stopping_patience",
  "type": "int"
 },
 "epochs": {
  "defaultValue": 30,
  "description": "number of training iterations over entire dataset",
  "name": "epochs",
  "type": "int"
 },
 "kernel_size": {
  "defaultValue": 2,
  "description": "width, height of each convolution kernel (stride is equal to this value)",
  "name": "kernel_size",
  "type": "int"
 },
 "latent_size": {
  "defaultValue": 100,
  "description": "number of neurons used in the embedding layer",
  "name": "latent_size",
  "type": "int"
 },
 "leaky_relu_alpha": {
  "defaultValue": 0.03,
  "description": "alpha value used for leaky relu activation function",
  "name": "leaky_relu_alpha",
  "type": "float"
 },
 "learning_rate": {
  "defaultValue": 0.001,
  "description": "Gradient factor for backpropagation",
  "name": "learning_rate",
  "type": "float"
 },
 "num_kernels": {
  "defaultValue": 64,
  "description": "number of convolution kernels used in each layer",
  "name": "num_kernels",
  "type": "int"
 },
 "random_state": {
  "defaultValue": 42,
  "description": "Seed for the random number generator",
  "name": "random_state",
  "type": "int"
 },
 "split": {
  "defaultValue": 0.8,
  "description": "train-validation split",
  "name": "split",
  "type": "float"
 },
 "test_batch_size": {
  "defaultValue": 128,
  "description": "number of simultaneously trained data instances",
  "name": "test_batch_size",
  "type": "int"
 }
}


def img_embedding_cae(params: Optional[ParameterConfig] = None, skip_pull: bool = False, timeout: Optional[Duration] = None) -> Algorithm:
    """ImageEmbeddingCAE

    Implementation of http://arxiv.org/abs/2009.02040


    **Algorithm Parameters:**

    anomaly_window_size: int
        length of one time series chunk (tumbling window) (default: ``512``)
    kernel_size: int
        width, height of each convolution kernel (stride is equal to this value) (default: ``2``)
    num_kernels: int
        number of convolution kernels used in each layer (default: ``64``)
    latent_size: int
        number of neurons used in the embedding layer (default: ``100``)
    leaky_relu_alpha: float
        alpha value used for leaky relu activation function (default: ``0.03``)
    batch_size: int
        number of simultaneously trained data instances (default: ``32``)
    test_batch_size: int
        number of simultaneously trained data instances (default: ``128``)
    learning_rate: float
        Gradient factor for backpropagation (default: ``0.001``)
    epochs: int
        number of training iterations over entire dataset (default: ``30``)
    split: float
        train-validation split (default: ``0.8``)
    early_stopping_delta: float
        If 1 - (loss / last_loss) is less than `delta` for `patience` epochs, stop (default: ``0.05``)
    early_stopping_patience: int
        If 1 - (loss / last_loss) is less than `delta` for `patience` epochs, stop (default: ``10``)
    random_state: int
        Seed for the random number generator (default: ``42``)

    Parameters
    ----------
    params : Optional[ParameterConfig]
        Parameter configuration for the algorithm
    skip_pull : bool
        Set to ``True`` to skip pulling the Docker image and use a local image instead.
        If the image is not present locally, this will raise an error.
    timeout : Optional[Duration]
        Set an individual execution and training timeout for this algorithm.
        This will overwrite the global timeouts set using :class:`~timeeval.ResourceConstraints`.

    Returns
    -------
    ~timeeval.Algorithm
        A correctly configured :class:`~timeeval.Algorithm` object for the ImageEmbeddingCAE algorithm.
    """
    return Algorithm(
        name="ImageEmbeddingCAE",
        main=DockerAdapter(
            image_name="ghcr.io/timeeval/img_embedding_cae",
            tag="0.3.0",
            skip_pull=skip_pull,
            timeout=timeout,
            group_privileges="akita",
        ),
        preprocess=None,
        postprocess=None,
        param_schema=_img_embedding_cae_parameters,
        param_config=params or ParameterConfig.defaults(),
        data_as_file=True,
        training_type=TrainingType.SEMI_SUPERVISED,
        input_dimensionality=InputDimensionality("univariate")
    )
