# DO NOT EDIT THIS FILE!
# This file was automatically generated using the timeeval_experiments.generator from the template:
# timeeval_experiments/generator/templates/docker-algorithm.py.jinja
from durations import Duration
from typing import Any, Dict, Optional

from timeeval import Algorithm, TrainingType, InputDimensionality
from timeeval.adapters import DockerAdapter
from timeeval.params import ParameterConfig

import numpy as np


from timeeval.utils.window import ReverseWindowing
# post-processing for Hybrid-KNN
def post_hybrid_knn(scores: np.ndarray, args: dict) -> np.ndarray:
    window_size = args.get("hyper_params", {}).get("anomaly_window_size", 20)
    return ReverseWindowing(window_size=window_size).fit_transform(scores)


_hybrid_knn_parameters: Dict[str, Dict[str, Any]] = {
 "anomaly_window_size": {
  "defaultValue": 20,
  "description": "windowing size for time series",
  "name": "anomaly_window_size",
  "type": "int"
 },
 "batch_size": {
  "defaultValue": 64,
  "description": "number of simultaneously trained data instances",
  "name": "batch_size",
  "type": "int"
 },
 "early_stopping_delta": {
  "defaultValue": 0.05,
  "description": "If 1 - (loss / last_loss) is less than `delta` for `patience` epochs, stop",
  "name": "early_stopping_delta",
  "type": "float"
 },
 "early_stopping_patience": {
  "defaultValue": 10,
  "description": "If 1 - (loss / last_loss) is less than `delta` for `patience` epochs, stop",
  "name": "early_stopping_patience",
  "type": "int"
 },
 "epochs": {
  "defaultValue": 1,
  "description": "number of training iterations over entire dataset",
  "name": "epochs",
  "type": "int"
 },
 "learning_rate": {
  "defaultValue": 0.001,
  "description": "Gradient factor for backpropagation",
  "name": "learning_rate",
  "type": "float"
 },
 "linear_layer_shape": {
  "defaultValue": [
   100,
   10
  ],
  "description": "NN structure with embedding dim as last value",
  "name": "linear_layer_shape",
  "type": "List[int]"
 },
 "n_estimators": {
  "defaultValue": 3,
  "description": "Defines number of ensembles",
  "name": "n_estimators",
  "type": "int"
 },
 "n_neighbors": {
  "defaultValue": 12,
  "description": "Defines which neighbour's distance to use",
  "name": "n_neighbors",
  "type": "int"
 },
 "random_state": {
  "defaultValue": 42,
  "description": "Seed for the random number generator",
  "name": "random_state",
  "type": "int"
 },
 "split": {
  "defaultValue": 0.8,
  "description": "train-validation split",
  "name": "split",
  "type": "float"
 },
 "test_batch_size": {
  "defaultValue": 256,
  "description": "number of simultaneously tested data instances",
  "name": "test_batch_size",
  "type": "int"
 }
}


def hybrid_knn(params: Optional[ParameterConfig] = None, skip_pull: bool = False, timeout: Optional[Duration] = None) -> Algorithm:
    """Hybrid KNN

    Implementation of https://www.hindawi.com/journals/cin/2017/8501683/


    **Algorithm Parameters:**

    linear_layer_shape: List[int]
        NN structure with embedding dim as last value (default: ``[100, 10]``)
    split: float
        train-validation split (default: ``0.8``)
    anomaly_window_size: int
        windowing size for time series (default: ``20``)
    batch_size: int
        number of simultaneously trained data instances (default: ``64``)
    test_batch_size: int
        number of simultaneously tested data instances (default: ``256``)
    epochs: int
        number of training iterations over entire dataset (default: ``1``)
    early_stopping_delta: float
        If 1 - (loss / last_loss) is less than `delta` for `patience` epochs, stop (default: ``0.05``)
    early_stopping_patience: int
        If 1 - (loss / last_loss) is less than `delta` for `patience` epochs, stop (default: ``10``)
    learning_rate: float
        Gradient factor for backpropagation (default: ``0.001``)
    n_neighbors: int
        Defines which neighbour's distance to use (default: ``12``)
    n_estimators: int
        Defines number of ensembles (default: ``3``)
    random_state: int
        Seed for the random number generator (default: ``42``)

    Parameters
    ----------
    params : Optional[ParameterConfig]
        Parameter configuration for the algorithm
    skip_pull : bool
        Set to ``True`` to skip pulling the Docker image and use a local image instead.
        If the image is not present locally, this will raise an error.
    timeout : Optional[Duration]
        Set an individual execution and training timeout for this algorithm.
        This will overwrite the global timeouts set using :class:`~timeeval.ResourceConstraints`.

    Returns
    -------
    ~timeeval.Algorithm
        A correctly configured :class:`~timeeval.Algorithm` object for the Hybrid KNN algorithm.
    """
    return Algorithm(
        name="Hybrid KNN",
        main=DockerAdapter(
            image_name="ghcr.io/timeeval/hybrid_knn",
            tag="0.3.0",
            skip_pull=skip_pull,
            timeout=timeout,
            group_privileges="akita",
        ),
        preprocess=None,
        postprocess=post_hybrid_knn,
        param_schema=_hybrid_knn_parameters,
        param_config=params or ParameterConfig.defaults(),
        data_as_file=True,
        training_type=TrainingType.SEMI_SUPERVISED,
        input_dimensionality=InputDimensionality("multivariate")
    )
