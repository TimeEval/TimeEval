# DO NOT EDIT THIS FILE!
# This file was automatically generated using the timeeval_experiments.generator from the template:
# timeeval_experiments/generator/templates/docker-algorithm.py.jinja
from durations import Duration
from typing import Any, Dict, Optional

from timeeval import Algorithm, TrainingType, InputDimensionality
from timeeval.adapters import DockerAdapter
from timeeval.params import ParameterConfig


_bagel_parameters: Dict[str, Dict[str, Any]] = {
 "batch_size": {
  "defaultValue": 128,
  "description": "Batch size for input data",
  "name": "batch_size",
  "type": "int"
 },
 "cuda": {
  "defaultValue": False,
  "description": "Use GPU for training",
  "name": "cuda",
  "type": "boolean"
 },
 "dropout": {
  "defaultValue": 0.1,
  "description": "Rate of conditional dropout used",
  "name": "dropout",
  "type": "float"
 },
 "early_stopping_delta": {
  "defaultValue": 0.5,
  "description": "If loss is `delta` or less smaller for `patience` epochs, stop",
  "name": "early_stopping_delta",
  "type": "float"
 },
 "early_stopping_patience": {
  "defaultValue": 10,
  "description": "If loss is `delta` or less smaller for `patience` epochs, stop",
  "name": "early_stopping_patience",
  "type": "int"
 },
 "epochs": {
  "defaultValue": 50,
  "description": "Number of passes over the entire dataset",
  "name": "epochs",
  "type": "int"
 },
 "hidden_layer_shape": {
  "defaultValue": [
   100,
   100
  ],
  "description": "NN hidden layers structure",
  "name": "hidden_layer_shape",
  "type": "List[int]"
 },
 "latent_size": {
  "defaultValue": 8,
  "description": "Dimensionality of encoding",
  "name": "latent_size",
  "type": "int"
 },
 "random_state": {
  "defaultValue": 42,
  "description": "Seed for the random number generator",
  "name": "random_state",
  "type": "int"
 },
 "split": {
  "defaultValue": 0.8,
  "description": "Fraction to split training data by for validation",
  "name": "split",
  "type": "float"
 },
 "window_size": {
  "defaultValue": 120,
  "description": "Size of sliding windows",
  "name": "window_size",
  "type": "int"
 }
}


def bagel(params: Optional[ParameterConfig] = None, skip_pull: bool = False, timeout: Optional[Duration] = None) -> Algorithm:
    """Bagel

    Implementation of https://doi.org/10.1109/PCCC.2018.8710885


    **Algorithm Parameters:**

    window_size: int
        Size of sliding windows (default: ``120``)
    latent_size: int
        Dimensionality of encoding (default: ``8``)
    hidden_layer_shape: List[int]
        NN hidden layers structure (default: ``[100, 100]``)
    dropout: float
        Rate of conditional dropout used (default: ``0.1``)
    cuda: boolean
        Use GPU for training (default: ``False``)
    epochs: int
        Number of passes over the entire dataset (default: ``50``)
    batch_size: int
        Batch size for input data (default: ``128``)
    split: float
        Fraction to split training data by for validation (default: ``0.8``)
    early_stopping_delta: float
        If loss is `delta` or less smaller for `patience` epochs, stop (default: ``0.5``)
    early_stopping_patience: int
        If loss is `delta` or less smaller for `patience` epochs, stop (default: ``10``)
    random_state: int
        Seed for the random number generator (default: ``42``)

    Parameters
    ----------
    params : Optional[ParameterConfig]
        Parameter configuration for the algorithm
    skip_pull : bool
        Set to ``True`` to skip pulling the Docker image and use a local image instead.
        If the image is not present locally, this will raise an error.
    timeout : Optional[Duration]
        Set an individual execution and training timeout for this algorithm.
        This will overwrite the global timeouts set using :class:`~timeeval.ResourceConstraints`.

    Returns
    -------
    ~timeeval.Algorithm
        A correctly configured :class:`~timeeval.Algorithm` object for the Bagel algorithm.
    """
    return Algorithm(
        name="Bagel",
        main=DockerAdapter(
            image_name="ghcr.io/timeeval/bagel",
            tag="0.3.0",
            skip_pull=skip_pull,
            timeout=timeout,
            group_privileges="akita",
        ),
        preprocess=None,
        postprocess=None,
        param_schema=_bagel_parameters,
        param_config=params or ParameterConfig.defaults(),
        data_as_file=True,
        training_type=TrainingType.SEMI_SUPERVISED,
        input_dimensionality=InputDimensionality("univariate")
    )
