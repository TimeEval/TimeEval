# DO NOT EDIT THIS FILE!
# This file was automatically generated using the timeeval_experiments.generator from the template:
# timeeval_experiments/generator/templates/docker-algorithm.py.jinja
from durations import Duration
from typing import Any, Dict, Optional

from timeeval import Algorithm, TrainingType, InputDimensionality
from timeeval.adapters import DockerAdapter
from timeeval.params import ParameterConfig


_cblof_parameters: Dict[str, Dict[str, Any]] = {
 "alpha": {
  "defaultValue": 0.9,
  "description": "Coefficient for deciding small and large clusters. The ratio of the number of samples in large clusters to the number of samples in small clusters. (0.5 < alpha < 1)",
  "name": "alpha",
  "type": "float"
 },
 "beta": {
  "defaultValue": 5,
  "description": "Coefficient for deciding small and large clusters. For a list sorted clusters by size `|C1|, |C2|, ..., |Cn|, beta = |Ck|/|Ck-1|`. (1.0 < beta )",
  "name": "beta",
  "type": "float"
 },
 "n_clusters": {
  "defaultValue": 8,
  "description": "The number of clusters to form as well as the number of centroids to generate.",
  "name": "n_clusters",
  "type": "int"
 },
 "n_jobs": {
  "defaultValue": 1,
  "description": "The number of parallel jobs to run for neighbors search. If `-1`, then the number of jobs is set to the number of CPU cores. Affects only kneighbors and kneighbors_graph methods.",
  "name": "n_jobs",
  "type": "int"
 },
 "random_state": {
  "defaultValue": 42,
  "description": "Seed for random number generation.",
  "name": "random_state",
  "type": "int"
 },
 "use_weights": {
  "defaultValue": "False",
  "description": "If set to True, the size of clusters are used as weights in outlier score calculation.",
  "name": "use_weights",
  "type": "boolean"
 }
}


def cblof(params: Optional[ParameterConfig] = None, skip_pull: bool = False, timeout: Optional[Duration] = None) -> Algorithm:
    """CBLOF

    Implementation of https://doi.org/10.1016/S0167-8655(03)00003-5.


    **Algorithm Parameters:**

    n_clusters: int
        The number of clusters to form as well as the number of centroids to generate. (default: ``8``)
    alpha: float
        Coefficient for deciding small and large clusters. The ratio of the number of samples in large clusters to the number of samples in small clusters. (0.5 < alpha < 1) (default: ``0.9``)
    beta: float
        Coefficient for deciding small and large clusters. For a list sorted clusters by size `|C1|, |C2|, ..., |Cn|, beta = |Ck|/|Ck-1|`. (1.0 < beta ) (default: ``5``)
    use_weights: boolean
        If set to True, the size of clusters are used as weights in outlier score calculation. (default: ``false``)
    random_state: int
        Seed for random number generation. (default: ``42``)
    n_jobs: int
        The number of parallel jobs to run for neighbors search. If `-1`, then the number of jobs is set to the number of CPU cores. Affects only kneighbors and kneighbors_graph methods. (default: ``1``)

    Parameters
    ----------
    params : Optional[ParameterConfig]
        Parameter configuration for the algorithm
    skip_pull : bool
        Set to ``True`` to skip pulling the Docker image and use a local image instead.
        If the image is not present locally, this will raise an error.
    timeout : Optional[Duration]
        Set an individual execution and training timeout for this algorithm.
        This will overwrite the global timeouts set using :class:`~timeeval.ResourceConstraints`.

    Returns
    -------
    ~timeeval.Algorithm
        A correctly configured :class:`~timeeval.Algorithm` object for the CBLOF algorithm.
    """
    return Algorithm(
        name="CBLOF",
        main=DockerAdapter(
            image_name="ghcr.io/timeeval/cblof",
            tag="0.3.1",
            skip_pull=skip_pull,
            timeout=timeout,
            group_privileges="akita",
        ),
        preprocess=None,
        postprocess=None,
        param_schema=_cblof_parameters,
        param_config=params or ParameterConfig.defaults(),
        data_as_file=True,
        training_type=TrainingType.UNSUPERVISED,
        input_dimensionality=InputDimensionality("multivariate")
    )
